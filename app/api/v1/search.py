from pathlib import Path
from fastapi import APIRouter, Depends, HTTPException, Request, Query
from app.schemas.search import SearchRequest, SearchResponse
from app.services.search import search_documents
from fastapi.templating import Jinja2Templates



# pylint: disable=duplicate-code
V1_DIR = Path(__file__).resolve().parent
API_DIR = V1_DIR.parent
APP_DIR = API_DIR.parent
TEMPLATES_DIR = APP_DIR / "templates"
# pylint: enable=duplicate-code


router = APIRouter(tags=["–§—Ä–æ–Ω—Ç–µ–Ω–¥"])
templates = Jinja2Templates(directory=TEMPLATES_DIR)


# @router.post("/search", response_model=SearchResponse)
# def search_endpoint(request: SearchRequest):
#     try:
#         results = search_documents(query=request.query, content_type=request.content_type)
#         return SearchResponse(results=results)
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

# üü© –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –æ—Ç–¥–∞—ë–º HTML —Ñ–æ—Ä–º—É
@router.get("/")
def get_search_page(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


# üü¶ API: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GET (–¥–ª—è —Ñ–æ—Ä–º—ã)
@router.get("/search", response_model=SearchResponse)
def search_api(
    request: Request,
    q: str = Query(..., alias="q", description="–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞"),
    type: str = Query(None, alias="type", description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Ñ–æ—Ä–º—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - q: —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
    - type: content_type (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    """
    try:
        results = search_documents(query=q, content_type=type if type else None)
        return SearchResponse(results=results)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")


